      - name: Generate mkdocs.gen.yml from GitBook SUMMARY.md
        run: |
          set -e
          python - << 'PY'
          import os, re, sys, yaml

          BASE_CFG = 'mkdocs.base.yml'
          SUMMARY  = os.path.join('docs','SUMMARY.md')

          if not os.path.exists(BASE_CFG):
            sys.exit("ERROR: mkdocs.base.yml not found at repo root")
          if not os.path.exists(SUMMARY):
            sys.exit("ERROR: docs/SUMMARY.md not found (is GitBook syncing to docs/?)")

          with open(BASE_CFG,'r',encoding='utf-8') as f:
            cfg = yaml.safe_load(f) or {}

          lines = open(SUMMARY,'r',encoding='utf-8').read().splitlines()
          lines = [ln.replace('\t','  ') for ln in lines]  # tabs→spaces

          # 見出し（##〜######）＝グループ、箇条書き（*-）＝項目
          h_re  = re.compile(r'^\s*#{2,6}\s+(.+?)(?:\s*<[^>]*>)?\s*$')
          li_re = re.compile(r'^(?P<indent>[ ]*)(?:[-*])\s+\[(?P<title>[^\]]+)\]\((?P<href>[^)]+)\)\s*$')

          root_nav = []              # ルートのnav
          current_base_list = root_nav
          stack = [current_base_list]
          indent_unit = None
          parsed_any  = False

          def collapse_once():
            if len(stack) <= 1 or not stack[-2]:
              return
            children = stack.pop()
            last = stack[-1][-1]
            k = next(iter(last))
            v = last[k]
            if isinstance(v, list):
              v.extend(children)
            else:
              last[k] = children

          for ln in lines:
            mh = h_re.match(ln)
            if mh:
              title = mh.group(1).strip()
              section_list = []
              root_nav.append({ title: section_list })
              current_base_list = section_list
              stack[:] = [current_base_list]  # reset stack (再代入ではなく内容置換)
              indent_unit = None
              continue

            m = li_re.match(ln)
            if not m:
              continue

            parsed_any = True
            spaces = len(m.group('indent'))
            if indent_unit is None and spaces > 0:
              indent_unit = spaces
            unit  = indent_unit or 2
            level = spaces // unit

            title = m.group('title').strip()
            href  = m.group('href').strip()
            href  = href.split('#',1)[0].lstrip('/')
            if href == '' or href.endswith('/'):
              href = href + 'README.md'

            is_ext = href.startswith('http://') or href.startswith('https://')
            path   = href if is_ext else os.path.join('docs', href)

            while len(stack)-1 < level:
              stack.append([])
            while len(stack)-1 > level:
              collapse_once()

            stack[-1].append({ title: path })

          while len(stack) > 1:
            collapse_once()

          if not parsed_any:
            print("DEBUG: SUMMARY.md (first 40 lines):")
            for i, ln in enumerate(lines[:40],1):
              print(f"{i:02d}: {ln}")
            sys.exit("ERROR: No entries parsed. Check bullet syntax and headings.")

          # 🔧 後処理：見出しグループ名と同名の「ルート直下の単独項目」を除去（重複防止）
          section_titles = set()
          for item in root_nav:
            if isinstance(item, dict):
              k = next(iter(item))
              if isinstance(item[k], list):
                section_titles.add(k.strip().lower())

          dedup_nav = []
          for item in root_nav:
            if isinstance(item, dict):
              k = next(iter(item))
              v = item[k]
              if isinstance(v, list):
                dedup_nav.append(item)  # これはグループ
              else:
                # ルート直下の“葉”が見出し名と同名なら除外
                if k.strip().lower() in section_titles:
                  continue
                dedup_nav.append(item)
            else:
              dedup_nav.append(item)

          cfg['nav'] = dedup_nav

          with open('mkdocs.gen.yml','w',encoding='utf-8') as f:
            yaml.dump(cfg, f, allow_unicode=True, sort_keys=False)

          print("=== mkdocs.gen.yml (preview) ===")
          print(open('mkdocs.gen.yml','r',encoding='utf-8').read())
          PY
