name: Build & Deploy MkDocs (GitHub Pages)
on:
  push:
    branches: [ main ]
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install -r requirements.txt

      # SUMMARY.md → nav 生成 → mkdocs.gen.yml を作成（プレビュー出力あり）
      - name: Generate mkdocs.gen.yml from GitBook SUMMARY.md
        run: |
          set -e
          python - << 'PY'
          import os, re, sys, yaml

          BASE_CFG = 'mkdocs.base.yml'
          SUMMARY = os.path.join('docs','SUMMARY.md')

          if not os.path.exists(BASE_CFG):
            sys.exit("ERROR: mkdocs.base.yml not found at repo root")
          if not os.path.exists(SUMMARY):
            sys.exit("ERROR: docs/SUMMARY.md not found (is GitBook syncing to docs/?)")

          with open(BASE_CFG,'r',encoding='utf-8') as f:
            cfg = yaml.safe_load(f) or {}

          # 1) 事前処理：タブ→2スペース、CRLF対策
          raw_lines = open(SUMMARY,'r',encoding='utf-8').read().splitlines()
          norm = []
          for ln in raw_lines:
            norm.append(ln.replace('\t','  '))
          lines = norm

          # 2) GitBookの行: "- [Title](path)" または "* [Title](path)" を許容
          #    先頭の空白でネストを判定
          link = re.compile(r'^(?P<indent>[ ]*)(?:[-*])\s+\[(?P<title>[^\]]+)\]\((?P<href>[^)]+)\)')

          entries = []
          min_indent = None
          for ln in lines:
            m = link.match(ln)
            if not m:
              continue
            indent = len(m.group('indent'))
            if indent and (min_indent is None or indent < min_indent):
              min_indent = indent
            title = m.group('title').strip()
            href  = m.group('href').strip()
            entries.append((indent, title, href))

          if not entries:
            print("DEBUG: SUMMARY.md preview (first 30 lines):")
            for i, ln in enumerate(lines[:30], 1):
              print(f"{i:02d}: {ln}")
            sys.exit("ERROR: No entries parsed from docs/SUMMARY.md. Expected lines like '- [Title](path.md)' or '* [Title](path.md)' with optional indentation for nesting.")

          # インデント幅（階層の単位）を推定（最低の正値）。見つからなければ2スペースを既定に
          unit = min_indent or 2

          # 3) エントリを階層構造に変換
          stack = [[]]  # ルートのnav配列
          def collapse():
            # 下位リストを1段上の最後の要素の子に畳み込む
            if len(stack) <= 1 or not stack[-2]:
              return
            children = stack.pop()
            last = stack[-1][-1]
            k = next(iter(last))
            v = last[k]
            if isinstance(v, list):
              v.extend(children)
            else:
              last[k] = children

          for indent, title, href in entries:
            level = indent // unit  # 0始まりのレベル

            # href整理：外部リンクはそのまま、相対は docs/ を前置
            is_external = href.startswith('http://') or href.startswith('https://')
            clean = href.split('#',1)[0].lstrip('/')
            if (not clean) or clean.endswith('/'):
              clean = clean + 'README.md'
            path = clean if is_external else os.path.join('docs', clean)

            # スタック高さを level+1 に調整
            while len(stack)-1 < level:
              stack.append([])
            while len(stack)-1 > level:
              collapse()

            stack[-1].append({ title: path })

          # 残りを畳み込み
          while len(stack) > 1:
            collapse()

          cfg['nav'] = stack[0]

          with open('mkdocs.gen.yml','w',encoding='utf-8') as f:
            yaml.dump(cfg, f, allow_unicode=True, sort_keys=False)

          print("=== mkdocs.gen.yml (preview) ===")
          print(open('mkdocs.gen.yml','r',encoding='utf-8').read())
          PY

      # 生成した mkdocs.gen.yml を使ってビルド
      - run: mkdocs build -f mkdocs.gen.yml --site-dir _site

      # アーティファクトとしてアップロード
      - uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
