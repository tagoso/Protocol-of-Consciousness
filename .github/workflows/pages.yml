name: Build & Deploy MkDocs (GitHub Pages)
on:
  push:
    branches: [ main ]
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install -r requirements.txt

      # SUMMARY.md → nav 生成 → mkdocs.gen.yml を作成（プレビュー出力あり）
      - name: Generate mkdocs.gen.yml from GitBook SUMMARY.md
        run: |
          set -e
          python - << 'PY'
          import os, re, sys, yaml, json

          BASE_CFG = 'mkdocs.base.yml'
          SUMMARY = os.path.join('docs','SUMMARY.md')

          if not os.path.exists(BASE_CFG):
              sys.exit("ERROR: mkdocs.base.yml not found at repo root")
          if not os.path.exists(SUMMARY):
              sys.exit("ERROR: docs/SUMMARY.md not found (is GitBook syncing to docs/?)")

          with open(BASE_CFG,'r',encoding='utf-8') as f:
            cfg = yaml.safe_load(f) or {}

          # GitBook summary lines: "- [Title](path.md)" with indentation for nesting
          link = re.compile(r'^(?P<indent>\s*)-\s*\[(?P<title>[^\]]+)\]\((?P<href>[^)]+)\)')
          stack = [[]]          # stack of lists; stack[0] == root nav list
          indent_unit = None    # space count per level (detected)

          lines = open(SUMMARY, 'r', encoding='utf-8').read().splitlines()
          parsed_any = False

          for line in lines:
            m = link.match(line)
            if not m:
              continue
            parsed_any = True
            spaces = len(m.group('indent'))
            if indent_unit is None and spaces > 0:
              indent_unit = spaces
            level = spaces // (indent_unit or 2)  # default 2 spaces if not detected

            # normalize href
            href = m.group('href').split('#',1)[0].strip().lstrip('/')
            if href == '' or href.endswith('/'):
              href = href + 'README.md'
            path = os.path.join('docs', href)

            title = m.group('title').strip()

            # ensure stack height == level+1
            while len(stack)-1 < level:
              stack.append([])
            while len(stack)-1 > level:
              children = stack.pop()
              if stack[-1]:
                last = stack[-1][-1]
                key = next(iter(last))
                val = last[key]
                if isinstance(val, list):
                  val.extend(children)
                else:
                  last[key] = children

            # append this node as leaf for now
            stack[-1].append({ title: path })

          # collapse remaining children
          while len(stack) > 1:
            children = stack.pop()
            if stack[-1]:
              last = stack[-1][-1]
              key = next(iter(last))
              val = last[key]
              if isinstance(val, list):
                val.extend(children)
              else:
                last[key] = children

          if not parsed_any:
            sys.exit("ERROR: No entries parsed from docs/SUMMARY.md. Check the syntax '- [Title](path.md)'.")

          cfg['nav'] = stack[0]

          with open('mkdocs.gen.yml','w',encoding='utf-8') as f:
            yaml.dump(cfg, f, allow_unicode=True, sort_keys=False)

          print("=== mkdocs.gen.yml (preview) ===")
          print(open('mkdocs.gen.yml','r',encoding='utf-8').read())
          PY

      # 生成した mkdocs.gen.yml を使ってビルド
      - run: mkdocs build -f mkdocs.gen.yml --site-dir _site

      # アーティファクトとしてアップロード
      - uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
