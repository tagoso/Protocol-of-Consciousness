name: Build & Deploy MkDocs (GitHub Pages)
on:
  push:
    branches: [ main ]
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install -r requirements.txt

      # SUMMARY.md -> nav生成（見出し=Group セクション化、*/- 箇条書き&インデント対応）
      - name: Generate mkdocs.gen.yml from GitBook SUMMARY.md
        run: |
          set -e
          python - << 'PY'
          import os, re, sys, yaml

          BASE_CFG = 'mkdocs.base.yml'
          SUMMARY  = os.path.join('docs','SUMMARY.md')

          if not os.path.exists(BASE_CFG):
            sys.exit("ERROR: mkdocs.base.yml not found at repo root")
          if not os.path.exists(SUMMARY):
            sys.exit("ERROR: docs/SUMMARY.md not found (is GitBook syncing to docs/?)")

          with open(BASE_CFG,'r',encoding='utf-8') as f:
            cfg = yaml.safe_load(f) or {}

          lines = open(SUMMARY,'r',encoding='utf-8').read().splitlines()
          # タブ→2スペースに正規化
          lines = [ln.replace('\t','  ') for ln in lines]

          # 見出し（##〜######）を検出してグループ化
          h_re   = re.compile(r'^\s*#{2,6}\s+(.+?)(?:\s*<[^>]*>)?\s*$')
          # 箇条書き "- [Title](href)" または "* [Title](href)"
          li_re  = re.compile(r'^(?P<indent>[ ]*)(?:[-*])\s+\[(?P<title>[^\]]+)\]\((?P<href>[^)]+)\)\s*$')

          root_nav = []    # ルートの nav 配列
          # 見出しセクションが無い最初の項目（Declaration/Abstractなど）を入れる場所
          current_base_list = root_nav

          # セクション内の階層管理用スタック（各要素はlist）
          stack = [current_base_list]
          indent_unit = None
          parsed_any  = False

          def collapse_once():
            """下層リストを1段上の最後の要素の子に畳み込む"""
            if len(stack) <= 1 or not stack[-2]:
              return
            children = stack.pop()
            last = stack[-1][-1]
            k = next(iter(last))
            v = last[k]
            if isinstance(v, list):
              v.extend(children)
            else:
              last[k] = children

          for ln in lines:
            # 1) セクション見出し？
            m_h = h_re.match(ln)
            if m_h:
              title = m_h.group(1).strip()
              # 新しいセクションを作成し、以後の項目はこの配下に入れる
              section_list = []
              root_nav.append({ title: section_list })
              current_base_list = section_list
              stack = [current_base_list]  # スタックをセクション配下起点にリセット
              indent_unit = None
              continue

            # 2) 箇条書き項目？
            m = li_re.match(ln)
            if not m:
              continue

            parsed_any = True
            spaces = len(m.group('indent'))
            if indent_unit is None and spaces > 0:
              indent_unit = spaces
            unit = indent_unit or 2
            level = spaces // unit  # 0,1,2,...

            title = m.group('title').strip()
            href  = m.group('href').strip()

            # href整形：アンカー除去・先頭スラッシュ除去・末尾/はREADME.mdに
            href = href.split('#',1)[0].lstrip('/')
            if href == '' or href.endswith('/'):
              href = href + 'README.md'

            # 外部リンクはそのまま、相対は docs/ を前置
            is_ext = href.startswith('http://') or href.startswith('https://')
            path = href if is_ext else os.path.join('docs', href)

            # スタック高さを level+1 に合わせる
            while len(stack)-1 < level:
              stack.append([])
            while len(stack)-1 > level:
              collapse_once()

            # いったん葉として追加
            stack[-1].append({ title: path })

          # ファイル末尾の畳み込み
          while len(stack) > 1:
            collapse_once()

          if not parsed_any:
            print("DEBUG: SUMMARY.md (first 40 lines):")
            for i, ln in enumerate(lines[:40],1):
              print(f"{i:02d}: {ln}")
            sys.exit("ERROR: No entries parsed from docs/SUMMARY.md. Check bullet syntax '* [Title](path.md)' or '- [Title](path.md)' and heading levels '## Heading'.")

          cfg['nav'] = root_nav

          with open('mkdocs.gen.yml','w',encoding='utf-8') as f:
            yaml.dump(cfg, f, allow_unicode=True, sort_keys=False)

          print("=== mkdocs.gen.yml (preview) ===")
          print(open('mkdocs.gen.yml','r',encoding='utf-8').read())
          PY

      # 生成した mkdocs.gen.yml を使ってビルド
      - run: mkdocs build -f mkdocs.gen.yml --site-dir _site

      # アーティファクトとしてアップロード
      - uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
